/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations about electric vehicles
 */
export class Evs {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * EV Battery Capacity
     *
     * @remarks
     * __Description__
     *
     * Returns the total capacity of an electric vehicle's battery.
     *
     * __Permission__
     *
     * `read_battery`
     *
     * __Response body__
     *
     * |  Name 	|Type   	|Boolean   	|
     * |---	|---	|---	|
     * |  capacity|   number|  The total capacity of the vehicle's battery (in kilowatt-hours). 	|
     */
    async getBatteryCapacity(
        vehicleId: string,
        config?: AxiosRequestConfig
    ): Promise<operations.GetBatteryCapacityResponse> {
        const req = new operations.GetBatteryCapacityRequest({
            vehicleId: vehicleId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/vehicles/{vehicle_id}/battery/capacity",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetBatteryCapacityResponse =
            new operations.GetBatteryCapacityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.batteryCapacity = utils.objectToClass(
                        httpRes?.data,
                        shared.BatteryCapacity
                    );
                }
                break;
        }

        return res;
    }

    /**
     * EV Battery Level
     *
     * @remarks
     * __Description__
     *
     * Retrieve EV battery level of a vehicle.
     *
     * __Permission__
     *
     * `read_battery`
     *
     * __Response body__
     *
     * |  Name 	|Type   	|Boolean   	|
     * |---	|---	|---	|
     * |  `percentRemaining`|   number|  An EV battery’s state of charge (in percent). 	|
     * |   `range`|   number	|   The estimated remaining distance the vehicle can travel (in kilometers by default or in miles using the [sc-unit-system](https://smartcar.com/docs/api?version=v2.0&language=cURL#request-headers).	|
     */
    async getBatteryLevel(
        vehicleId: string,
        config?: AxiosRequestConfig
    ): Promise<operations.GetBatteryLevelResponse> {
        const req = new operations.GetBatteryLevelRequest({
            vehicleId: vehicleId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/vehicles/{vehicle_id}/battery", req);

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetBatteryLevelResponse = new operations.GetBatteryLevelResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.batteryLevel = utils.objectToClass(httpRes?.data, shared.BatteryLevel);
                }
                break;
        }

        return res;
    }

    /**
     * EV Charging Limit
     *
     * @remarks
     * __Description__
     *
     * Returns the current charge limit of an electric vehicle.
     */
    async getChargingLimit(
        vehicleId: string,
        config?: AxiosRequestConfig
    ): Promise<operations.GetChargingLimitResponse> {
        const req = new operations.GetChargingLimitRequest({
            vehicleId: vehicleId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/vehicles/{vehicle_id}/charge/limit", req);

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetChargingLimitResponse = new operations.GetChargingLimitResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.chargeLimit = utils.objectToClass(httpRes?.data, shared.ChargeLimit);
                }
                break;
        }

        return res;
    }

    /**
     * EV Charging Status
     *
     * @remarks
     * __Description__
     *
     * Returns the current charge status of an electric vehicle.
     *
     * __Permission__
     *
     * `read_charge`
     *
     * __Response body__
     *
     * |  Name 	|Type   	|Boolean   	|
     * |---	|---	|---	|
     * |  `isPluggedIn` 	|   boolean	|  Indicates whether a charging cable is currently plugged into the vehicle’s charge port. 	|
     * |   `state`	|   string	|   Indicates whether the vehicle is currently charging. Options: `CHARGING` `FULLY_CHARGED` `NOT_CHARGING`	|
     */
    async getChargingStatus(
        vehicleId: string,
        config?: AxiosRequestConfig
    ): Promise<operations.GetChargingStatusResponse> {
        const req = new operations.GetChargingStatusRequest({
            vehicleId: vehicleId,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/vehicles/{vehicle_id}/charge", req);

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetChargingStatusResponse = new operations.GetChargingStatusResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.chargeStatus = utils.objectToClass(httpRes?.data, shared.ChargeStatus);
                }
                break;
        }

        return res;
    }

    /**
     * Set EV Charging Limit
     *
     * @remarks
     * __Description__
     *
     * Returns the current charge limit of an electric vehicle.
     */
    async setChargingLimit(
        vehicleId: string,
        chargeLimit?: shared.ChargeLimit,
        config?: AxiosRequestConfig
    ): Promise<operations.SetChargingLimitResponse> {
        const req = new operations.SetChargingLimitRequest({
            vehicleId: vehicleId,
            chargeLimit: chargeLimit,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/vehicles/{vehicle_id}/charge/limit", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "chargeLimit", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.SetChargingLimitResponse = new operations.SetChargingLimitResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.successResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.SuccessResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Start or stop charging an electric vehicle. Please contact us to request early access.
     *
     * @remarks
     * __Description__
     *
     * Returns the current charge status of an electric vehicle.
     *
     * __Permission__
     *
     * `read_charge`
     *
     * __Response body__
     *
     * |  Name 	|Type   	|Boolean   	|
     * |---	|---	|---	|
     * |  `isPluggedIn` 	|   boolean	|  Indicates whether a charging cable is currently plugged into the vehicle’s charge port. 	|
     * |   `state`	|   string	|   Indicates whether the vehicle is currently charging. Options: `CHARGING` `FULLY_CHARGED` `NOT_CHARGING`	|
     */
    async startStopCharge(
        vehicleId: string,
        chargeAction?: shared.ChargeAction,
        config?: AxiosRequestConfig
    ): Promise<operations.StartStopChargeResponse> {
        const req = new operations.StartStopChargeRequest({
            vehicleId: vehicleId,
            chargeAction: chargeAction,
        });
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/vehicles/{vehicle_id}/charge", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "chargeAction", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.StartStopChargeResponse = new operations.StartStopChargeResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.successResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.SuccessResponse
                    );
                }
                break;
        }

        return res;
    }
}
